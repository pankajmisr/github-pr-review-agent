# agent.py

"""
Main implementation of the GitHub PR Review Agent using Google's Agent Development Kit (ADK).
"""

import os
import logging
from typing import Dict, List, Any, Optional
from datetime import datetime
from dotenv import load_dotenv

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService

# Import GitHub tools
from github_tools import (
    get_pr_details,
    get_pr_files,
    submit_pr_review,
    add_pr_comment
)

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# GitHub token from environment variables
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
if not GITHUB_TOKEN:
    raise ValueError("GITHUB_TOKEN environment variable is not set")

# ADK model configuration
MODEL_NAME = os.getenv("MODEL_NAME", "gemini-2.5-pro")

# App name for the ADK runner
APP_NAME = "github-pr-review-agent"

# Create session service for managing conversation state
session_service = InMemorySessionService()

def analyze_code_changes(pr_files: List[Dict[str, Any]]) -> Dict[str, Any]:
    """
    Analyzes code changes in a pull request and provides feedback.
    This tool is used by the agent to process and analyze files changed in a PR.
    
    Args:
        pr_files (list): List of files changed in the pull request
        
    Returns:
        dict: Analysis results with suggestions and concerns
    """
    # Extract basic statistics
    stats = {
        "total_files": len(pr_files),
        "files_by_type": {},
        "total_additions": sum(f.get("additions", 0) for f in pr_files),
        "total_deletions": sum(f.get("deletions", 0) for f in pr_files),
        "total_changes": sum(f.get("changes", 0) for f in pr_files),
    }
    
    # Count files by type
    for file in pr_files:
        filename = file.get("filename", "")
        if "." in filename:
            ext = filename.split(".")[-1]
            stats["files_by_type"][ext] = stats["files_by_type"].get(ext, 0) + 1
    
    # Format the files data for the LLM to analyze
    files_data = []
    for file in pr_files:
        if file.get("error"):
            continue
            
        file_data = {
            "filename": file.get("filename"),
            "status": file.get("status"),
            "changes": file.get("changes"),
            "patch": file.get("patch", "")[:2000],  # Limit patch size
        }
        
        # Include content for smaller files
        if file.get("content") and len(file.get("content", "")) < 10000:
            file_data["content"] = file.get("content")
            
        files_data.append(file_data)
    
    return {
        "stats": stats,
        "files": files_data
    }

def generate_review_from_analysis(analysis_result: Dict[str, Any]) -> Dict[str, Any]:
    """
    Generates review comments based on the code analysis.
    
    Args:
        analysis_result (dict): Results from the code analysis
        
    Returns:
        dict: Generated review with summary and comments
    """
    # This function will be called by the LLM through tool use
    # The actual review generation will be done by the LLM
    return {
        "analysis_received": True,
        "stats": analysis_result.get("stats", {}),
        "file_count": len(analysis_result.get("files", [])),
    }

def format_review_for_submission(
    review_data: Dict[str, Any],
    repo_owner: str,
    repo_name: str,
    pr_number: int
) -> Dict[str, Any]:
    """
    Formats the review data for submission to GitHub.
    
    Args:
        review_data (dict): Review data generated by the agent
        repo_owner (str): Repository owner
        repo_name (str): Repository name
        pr_number (int): Pull request number
        
    Returns:
        dict: Formatted review data ready for submission
    """
    # This will be used to format the review data from the LLM into the format
    # expected by the GitHub API
    return {
        "ready_for_submission": True,
        "repo_owner": repo_owner,
        "repo_name": repo_name,
        "pr_number": pr_number,
        "review_body": review_data.get("summary", ""),
        "event": review_data.get("decision", "COMMENT"),
        "comments": review_data.get("comments", [])
    }

def create_pr_review_agent() -> Agent:
    """
    Creates and configures the PR review agent with tools and instructions.
    
    Returns:
        Agent: Configured PR review agent
    """
    # Define the agent's tools
    tools = [
        get_pr_details,
        get_pr_files,
        analyze_code_changes,
        generate_review_from_analysis,
        format_review_for_submission,
        submit_pr_review,
        add_pr_comment
    ]
    
    # Create the agent with detailed instructions
    agent = Agent(
        model=MODEL_NAME,
        name="github_pr_review_agent",
        instruction="""
        You are a GitHub Pull Request Review Assistant that helps developers by reviewing code changes.
        Your goal is to provide constructive feedback and identify potential issues in the code.
        
        When reviewing code:
        1. Analyze the changes for potential bugs, security issues, or performance problems
        2. Check for adherence to best practices and coding standards
        3. Look for opportunities to improve code quality, readability, and maintainability
        4. Provide clear explanations of issues found and suggest improvements
        5. Be respectful and constructive in your feedback
        
        Your review process:
        1. Get the PR details using get_pr_details
        2. Get the files changed using get_pr_files
        3. Analyze the code changes using analyze_code_changes
        4. Generate a review with feedback using generate_review_from_analysis
        5. Format the review for submission using format_review_for_submission
        6. Submit the review using submit_pr_review or add_pr_comment
        
        Your review should categorize issues as:
        - Critical: Issues that will cause errors or security vulnerabilities
        - High: Issues that should be fixed before merging
        - Medium: Recommendations that would improve code quality
        - Low: Minor suggestions or style improvements
        
        Your tone should be professional, helpful, and educational. Always explain why something 
        is an issue and how it can be improved, not just that it's wrong.
        """,
        tools=tools
    )
    
    return agent

def review_pull_request(
    repo_owner: str, 
    repo_name: str, 
    pr_number: int,
    user_id: str = "user1",
    session_id: Optional[str] = None
) -> None:
    """
    Reviews a GitHub pull request using the PR review agent.
    
    Args:
        repo_owner (str): Repository owner
        repo_name (str): Repository name
        pr_number (int): Pull request number
        user_id (str): User ID for the session
        session_id (str, optional): Session ID for conversation state
    """
    try:
        # Create the agent
        agent = create_pr_review_agent()
        
        # Generate session ID if not provided
        if not session_id:
            session_id = f"pr_{repo_owner}_{repo_name}_{pr_number}_{datetime.now().strftime('%Y%m%d%H%M%S')}"
        
        # Create a runner with app_name parameter
        runner = Runner(agent=agent, session_service=session_service, app_name=APP_NAME)
        
        # Start the review process
        initial_message = f"Please review the pull request #{pr_number} from the repository {repo_owner}/{repo_name}."
        
        # Use the run method instead of run_async for simplicity
        response = runner.run(
            user_id=user_id,
            session_id=session_id,
            message=initial_message
        )
        
        logger.info(f"Agent response: {response.text if hasattr(response, 'text') else response}")
        logger.info(f"PR review completed for {repo_owner}/{repo_name}#{pr_number}")
    
    except Exception as e:
        logger.error(f"Error reviewing PR: {e}")
        raise

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="GitHub PR Review Agent")
    parser.add_argument("--owner", required=True, help="Repository owner")
    parser.add_argument("--repo", required=True, help="Repository name")
    parser.add_argument("--pr", required=True, type=int, help="Pull request number")
    
    args = parser.parse_args()
    
    # Run the PR review
    review_pull_request(args.owner, args.repo, args.pr)
