# agent.py

"""
Main implementation of the GitHub PR Review Agent using Google's Agent Development Kit (ADK).
Simplified version for compatibility with ADK 0.1.0.
"""

import os
import logging
import asyncio
from typing import Dict, List, Any, Optional
from datetime import datetime
from dotenv import load_dotenv

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService

# Import GitHub tools
from github_tools import (
    get_pr_details,
    get_pr_files,
    submit_pr_review,
    add_pr_comment
)

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# GitHub token from environment variables
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
if not GITHUB_TOKEN:
    raise ValueError("GITHUB_TOKEN environment variable is not set")

# Google API key
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
if not GOOGLE_API_KEY:
    raise ValueError("GOOGLE_API_KEY environment variable is not set")

# ADK model configuration - use a model that you know exists in your version
MODEL_NAME = os.getenv("MODEL_NAME", "gemini-1.0-pro")

# App name for the ADK runner
APP_NAME = "github_pr_review_agent"
USER_ID = "user_1"

# Create session service for managing conversation state
session_service = InMemorySessionService()

def analyze_code_changes(pr_files: List[Dict[str, Any]]) -> Dict[str, Any]:
    """
    Analyzes code changes in a pull request and provides feedback.
    
    Args:
        pr_files (list): List of files changed in the pull request
        
    Returns:
        dict: Analysis results with suggestions and concerns
    """
    # Extract basic statistics
    stats = {
        "total_files": len(pr_files),
        "files_by_type": {},
        "total_additions": sum(f.get("additions", 0) for f in pr_files),
        "total_deletions": sum(f.get("deletions", 0) for f in pr_files),
        "total_changes": sum(f.get("changes", 0) for f in pr_files),
    }
    
    # Count files by type
    for file in pr_files:
        filename = file.get("filename", "")
        if "." in filename:
            ext = filename.split(".")[-1]
            stats["files_by_type"][ext] = stats["files_by_type"].get(ext, 0) + 1
    
    # Format the files data for the LLM to analyze
    files_data = []
    for file in pr_files:
        if file.get("error"):
            continue
            
        file_data = {
            "filename": file.get("filename"),
            "status": file.get("status"),
            "changes": file.get("changes"),
            "patch": file.get("patch", "")[:2000],  # Limit patch size
        }
        
        # Include content for smaller files
        if file.get("content") and len(file.get("content", "")) < 10000:
            file_data["content"] = file.get("content")
            
        files_data.append(file_data)
    
    return {
        "stats": stats,
        "files": files_data
    }

def generate_review_from_analysis(analysis_result: Dict[str, Any]) -> Dict[str, Any]:
    """
    Generates review comments based on the code analysis.
    
    Args:
        analysis_result (dict): Results from the code analysis
        
    Returns:
        dict: Generated review with summary and comments
    """
    return {
        "analysis_received": True,
        "stats": analysis_result.get("stats", {}),
        "file_count": len(analysis_result.get("files", [])),
    }

def format_review_for_submission(
    review_data: Dict[str, Any],
    repo_owner: str,
    repo_name: str,
    pr_number: int
) -> Dict[str, Any]:
    """
    Formats the review data for submission to GitHub.
    
    Args:
        review_data (dict): Review data generated by the agent
        repo_owner (str): Repository owner
        repo_name (str): Repository name
        pr_number (int): Pull request number
        
    Returns:
        dict: Formatted review data ready for submission
    """
    return {
        "ready_for_submission": True,
        "repo_owner": repo_owner,
        "repo_name": repo_name,
        "pr_number": pr_number,
        "review_body": review_data.get("summary", ""),
        "event": review_data.get("decision", "COMMENT"),
        "comments": review_data.get("comments", [])
    }

def create_pr_review_agent() -> Agent:
    """
    Creates and configures the PR review agent with tools and instructions.
    
    Returns:
        Agent: Configured PR review agent
    """
    # Define the agent's tools
    tools = [
        get_pr_details,
        get_pr_files,
        analyze_code_changes,
        generate_review_from_analysis,
        format_review_for_submission,
        submit_pr_review,
        add_pr_comment
    ]
    
    # Create the agent with detailed instructions
    agent = Agent(
        model=MODEL_NAME,
        name="github_pr_review_agent",
        description="Provides code review and feedback for GitHub pull requests.",
        instruction="""
        You are a GitHub Pull Request Review Assistant that helps developers by reviewing code changes.
        Your goal is to provide constructive feedback and identify potential issues in the code.
        
        When reviewing code:
        1. Use the get_pr_details tool to get information about the PR
        2. Use the get_pr_files tool to get the files changed in the PR
        3. Use the analyze_code_changes tool to process and analyze the files
        4. Use the generate_review_from_analysis tool to create a structured review
        5. Use the format_review_for_submission tool to prepare the review for GitHub
        6. Use the submit_pr_review or add_pr_comment tool to send feedback to GitHub
        
        Your review should categorize issues as:
        - Critical: Issues that will cause errors or security vulnerabilities
        - High: Issues that should be fixed before merging
        - Medium: Recommendations that would improve code quality
        - Low: Minor suggestions or style improvements
        
        Your tone should be professional, helpful, and educational.
        """,
        tools=tools
    )
    
    return agent

class InvocationContext:
    """Simple class to mimic the expected context structure"""
    def __init__(self, message):
        self.message = message

def review_pull_request(
    repo_owner: str, 
    repo_name: str, 
    pr_number: int,
) -> None:
    """
    Reviews a GitHub pull request using the PR review agent.
    
    Args:
        repo_owner (str): Repository owner
        repo_name (str): Repository name
        pr_number (int): Pull request number
    """
    try:
        # Create the agent
        agent = create_pr_review_agent()
        logger.info(f"Created agent '{agent.name}' with model '{MODEL_NAME}'")
        
        # Create a session ID
        session_id = f"pr_{repo_owner}_{repo_name}_{pr_number}_{datetime.now().strftime('%Y%m%d%H%M%S')}"
        
        # Create session
        session = session_service.create_session(
            app_name=APP_NAME,
            user_id=USER_ID,
            session_id=session_id
        )
        logger.info(f"Created session with ID: {session_id}")
        
        # Create a minimal runner
        runner = Runner(
            agent=agent,
            app_name=APP_NAME,
            session_service=session_service
        )
        logger.info(f"Created runner for agent '{runner.agent.name}'")
        
        # Define the message for the agent
        initial_message = f"Please review pull request #{pr_number} from {repo_owner}/{repo_name}."
        logger.info(f"Starting review with message: '{initial_message}'")
        
        # Use a very simple approach - just try to run the agent
        try:
            # Try with minimal invocation
            from google.adk.invocation_context import InvocationContext
            context = InvocationContext(
                agent=agent,
                user_id=USER_ID,
                session_id=session_id,
                app_name=APP_NAME
            )
            context.message = initial_message
            
            logger.info("Running the agent...")
            agent.run(context)
            logger.info("Agent execution completed.")
            
            logger.info(f"PR review completed for {repo_owner}/{repo_name}#{pr_number}")
        except Exception as e:
            logger.error(f"Error running agent: {e}")
            logger.info("Trying a different approach...")
            
            # If direct execution fails, try using CLI instead
            from subprocess import Popen, PIPE
            import tempfile
            import json
            
            # Create a minimal agent file
            with tempfile.NamedTemporaryFile(suffix='.py', mode='w', delete=False) as f:
                f.write(f"""
# Simple agent for PR review
from google.adk.agents import Agent
from github_tools import get_pr_details, get_pr_files, add_pr_comment

agent = Agent(
    model="{MODEL_NAME}",
    name="github_pr_review_agent",
    instruction="You are a GitHub Pull Request Review Assistant. Review PR #{pr_number} from {repo_owner}/{repo_name}.",
    tools=[get_pr_details, get_pr_files, add_pr_comment]
)
                """)
                agent_file = f.name
            
            logger.info(f"Created temporary agent file: {agent_file}")
            logger.info("Running agent with ADK CLI...")
            
            try:
                process = Popen(['adk', 'run', agent_file], stdout=PIPE, stderr=PIPE)
                stdout, stderr = process.communicate()
                logger.info(f"ADK CLI output: {stdout.decode()}")
                if stderr:
                    logger.error(f"ADK CLI error: {stderr.decode()}")
            except Exception as e:
                logger.error(f"Error running ADK CLI: {e}")
    
    except Exception as e:
        logger.error(f"Error in review process: {e}")
        raise

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="GitHub PR Review Agent")
    parser.add_argument("--owner", required=True, help="Repository owner")
    parser.add_argument("--repo", required=True, help="Repository name")
    parser.add_argument("--pr", required=True, type=int, help="Pull request number")
    
    args = parser.parse_args()
    
    # Run the PR review
    review_pull_request(args.owner, args.repo, args.pr)
